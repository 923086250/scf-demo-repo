{
  "serverless-cloud-function-application": {
    "application":{
      "Chinese":{
        "name": "影音轉碼",
        "description": "使用COS+雲函數+ASR+CFS（可選），快速構建影音轉碼服務；憑借 ffmpeg，還可以擴展支援自定義的轉碼能力",
        "attention": "1. 本範例需要在環境變量配置COS的bucket訊息，并設置COS觸發器或者API閘道觸發器配合使用；2. 另外在函數配置中會使用運作角色來操作COS資源，需要确保有cos bucket的對象上傳權限；3. 源文件所在bucket需要設置爲公有讀私有寫。",
        "readme": {
            "file": "",
            "content": ""
        },
        "license": {
            "file": "",
            "content": "公開"
        },
        "author": {
            "name": "Top Cloud 無服務器雲函數團隊"
        }
      },
      "English":{
        "name": "Transcode",
        "description": "This example demonstrates triggering a cloud function from COS or a gateway, obtaining the source file download address, and transcoding based on ffmpeg using HTTP read stream",
        "attention": "This example needs to configure the COS bucket information in the environment variable, and set the COS trigger or API gateway trigger to cooperate with",
        "readme": {
            "file": "",  // readme file
            "content": ""  //content of readme
        },
        "license": {
            "file": "",  // license file
            "content": "Open"  //content of license
        },
        "author": {
            "name": "Tencent Cloud Serverless Team"  // author
        }
      },
      "input_parameters":{
        "event":"",
        "context":""
      },
      "output_parameters":{
      },
      "download_address":"https://github.com/taifucloudyun/scf-demo-repo/tree/master/Nodejs10.15-Transcode",  // Demo's git download url. demo的git下載連結
      "tags":[
              "COS", "Nodejs10.15", "ffmpeg","CFS"  
              // The tags only support English and can be multiple, we suggest you to use keywords such as runtime, trigger, environment and so on.
              // 标簽統一爲英文，可編寫多個，建議使用runtime、觸發器、場景等關鍵字，用戶可以通過該關鍵字搜索。前台需要展示，請認真填寫，不支援中文
      ],
      "version": "1.3"  
      // Version number, which identifies the demo version status. 
      // Demo will not to update to the page if the version number unmodified.
      //版本号，通過版本号标識 demo 升級情況，未修改版本号會導緻 demo 不更新至頁面
    },
    "functions": {
      "name": "transcode_ffmpeg",  // Function name which only be in English. 函數名稱，只支援英文
      "description": "本範例演示從COS（物件儲存）或者閘道觸發雲函數，獲取源文件下載網址，并基于ffmpeg，采用HTTP讀流的方式進行轉碼；并把轉碼後的文件上傳到COS。注意：1. 本範例需要在環境變量配置COS的bucket訊息，并設置COS觸發器或者API閘道觸發器配合使用；2. 另外在函數配置中會使用運作角色來操作COS資源，需要确保有cos bucket的對象上傳權限；3. 源文件所在bucket需要設置爲公有讀私有寫。",
      "handler":"index.main_handler",
      "memorySize": 3072,  // Running memory. 運作配置内存
      "timeout": 300,  // Running timeout. 運作超時時間
      "runtime": "Nodejs10.15", // Runtime which users can search demo by this keyword. 運作環境，用戶可以通過該關鍵字搜索["Python2.7", "Python3.6", "Nodejs6.10", "Java8", "LuaCDN", "NodejsCDN", "Php5", "Php7", "Nodejs8.9", "Go1"]
      "Environment":{
        "region": "ap-shanghai",
        "target_bucket": "serverless-demo-1256608914",
        "target_path": "/transcode"
      },      // Optional, used to define environment variables.  可選，用于定義環境變量
      "Events":{
      },      // Optional, used define the event source that triggers this function. 可選，用于定義觸發此函數的事件源
      "VpcConfig":{
      },      // Optional, used configure cloud function's private network. 可選， 用于配置雲函數訪問 VPC 私有網絡。
      "codeObject": {
          "codeFile": [
              "index.js"
          ],
          "CodeUri":[     // Code download url which should be same as 'download_address'. 代碼下載網址，和download_address保持一緻
              "https://github.com/taifucloudyun/scf-demo-repo/tree/master/Nodejs10.15-Transcode"
          ]
      }
    }
  }
}